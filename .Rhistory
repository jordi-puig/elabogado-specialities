knitr::opts_chunk$set(echo = TRUE)
library(cluster)
library(dplyr)
library(class)
library(purrr)
library(ggplot2)
library(factoextra)
library(mclust)
library(fpc)
library(arules)
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities.csv',stringsAsFactors = FALSE)
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(cluster)
library(dplyr)
library(class)
library(purrr)
library(ggplot2)
library(factoextra)
library(mclust)
library(fpc)
library(arules)
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities.csv',stringsAsFactors = TRUE)
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
colSums(is.na(specialities.data))
# discretitzem les dades
for (i in 1:4) {
specialities.data[,i] <- specialities.data(lastfm.data[,i])
}
# discretitzem les dades
for (i in 1:4) {
specialities.data[,i] <- as.factor(specialities.data[,i])
}
# discretitzem les dades
for (i in 1:3) {
specialities.data[,i] <- as.factor(specialities.data[,i])
}
summary(specialities.data)
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities.csv',stringsAsFactors = TRUE, encoding = 'utf8')
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities.csv',stringsAsFactors = TRUE, encoding = 'utf8')
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities.csv',stringsAsFactors = TRUE, encoding = 'utf8')
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
# discretitzem les dades
for (i in 1:3) {
specialities.data[,i] <- as.factor(specialities.data[,i])
}
summary(specialities.data)
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities.csv',stringsAsFactors = TRUE, encoding = 'utf8')
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities.csv',stringsAsFactors = TRUE, encoding = 'utf8')
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities.csv',stringsAsFactors = TRUE, encoding='iso-8859-1')
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities.csv',stringsAsFactors = TRUE, encoding='cp1252')
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities.csv',stringsAsFactors = TRUE, encoding='latin1')
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities.csv',stringsAsFactors = FALSE, encoding='latin1')
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
# discretitzem les dades
for (i in 1:3) {
specialities.data[,i] <- as.factor(specialities.data[,i])
}
summary(specialities.data)
library(cluster)
library(dplyr)
library(class)
library(purrr)
library(ggplot2)
library(factoextra)
library(mclust)
library(fpc)
library(arules)
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities.csv',stringsAsFactors = FALSE, encoding='latin1')
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities.csv',stringsAsFactors = FALSE, encoding='latin1')
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
colSums(is.na(specialities.data))
# discretitzem les dades
for (i in 1:3) {
specialities.data[,i] <- as.factor(specialities.data[,i])
}
summary(specialities.data)
View(specialities.data)
# transformem el data en una llista dels artistes agrupats per els usuaris, es a dir, tenim els artistes que escolta cada usuari
# contem el número d'usuaris diferents i ens surten 15000. Tindrem 15000 transaccions
users <- specialities.data[,"user"]
# transformem el data en una llista dels artistes agrupats per els usuaris, es a dir, tenim els artistes que escolta cada usuari
# contem el número d'usuaris diferents i ens surten 15000. Tindrem 15000 transaccions
users <- specialities.data[,"id_user"]
n_distinct(users)
speciality <- split(x=specialities.data[,"speciality"],f=specialities.data$id_user)
# trasformem el data com a transactions. Cada transacció es un usuari i els artistes que ha escoltat
speciality.transactions <- as(speciality,"transactions")
itemFrequencyPlot(speciality.transactions, support = .07, cex.names = .6, col = rainbow(4))
# transformem el data en una llista dels artistes agrupats per els usuaris, es a dir, tenim els artistes que escolta cada usuari
# contem el número d'usuaris diferents i ens surten 15000. Tindrem 15000 transaccions
users <- specialities.data[,"id_user"]
n_distinct(users)
speciality <- split(x=specialities.data[,"speciality"],f=specialities.data$id_user)
# trasformem el data com a transactions. Cada transacció es un usuari i els artistes que ha escoltat
speciality.transactions <- as(speciality,"transactions")
itemFrequencyPlot(speciality.transactions, support = .01, cex.names = .6, col = rainbow(10))
# transformem el data en una llista dels artistes agrupats per els usuaris, es a dir, tenim els artistes que escolta cada usuari
# contem el número d'usuaris diferents i ens surten 15000. Tindrem 15000 transaccions
users <- specialities.data[,"id_user"]
n_distinct(users)
speciality <- split(x=specialities.data[,"speciality"],f=specialities.data$id_user)
# trasformem el data com a transactions. Cada transacció es un usuari i els artistes que ha escoltat
speciality.transactions <- as(speciality,"transactions")
itemFrequencyPlot(speciality.transactions, support = .1, cex.names = .6, col = rainbow(10))
# transformem el data en una llista dels artistes agrupats per els usuaris, es a dir, tenim els artistes que escolta cada usuari
# contem el número d'usuaris diferents i ens surten 15000. Tindrem 15000 transaccions
users <- specialities.data[,"id_user"]
n_distinct(users)
speciality <- split(x=specialities.data[,"speciality"],f=specialities.data$id_user)
# trasformem el data com a transactions. Cada transacció es un usuari i els artistes que ha escoltat
speciality.transactions <- as(speciality,"transactions")
itemFrequencyPlot(speciality.transactions, support = .1, cex.names = .6, col = rainbow(10), decreasing=TRUE)
# transformem el data en una llista dels artistes agrupats per els usuaris, es a dir, tenim els artistes que escolta cada usuari
# contem el número d'usuaris diferents i ens surten 15000. Tindrem 15000 transaccions
users <- specialities.data[,"id_user"]
n_distinct(users)
speciality <- split(x=specialities.data[,"speciality"],f=specialities.data$id_user)
# trasformem el data com a transactions. Cada transacció es un usuari i els artistes que ha escoltat
speciality.transactions <- as(speciality,"transactions")
itemFrequencyPlot(speciality.transactions, support = .1, cex.names = .6, col = rainbow(10), decreasing=TRUE, topN=0.1)
# transformem el data en una llista dels artistes agrupats per els usuaris, es a dir, tenim els artistes que escolta cada usuari
# contem el número d'usuaris diferents i ens surten 15000. Tindrem 15000 transaccions
users <- specialities.data[,"id_user"]
n_distinct(users)
speciality <- split(x=specialities.data[,"speciality"],f=specialities.data$id_user)
# trasformem el data com a transactions. Cada transacció es un usuari i els artistes que ha escoltat
speciality.transactions <- as(speciality,"transactions")
itemFrequencyPlot(speciality.transactions, support = .1, cex.names = .6, col = rainbow(10), topN=10)
# transformem el data en una llista de les specialities agrupats per els usuaris, es a dir, tenim les specialities que escull cada usuari
# contem el número d'usuaris diferents i ens surten 15000. Tindrem 12130 transaccions
users <- specialities.data[,"id_user"]
n_distinct(users)
speciality <- split(x=specialities.data[,"speciality"],f=specialities.data$id_user)
# trasformem el data com a transactions. Cada transacció es un usuari i les espcialitats que selecciona
speciality.transactions <- as(speciality,"transactions")
itemFrequencyPlot(speciality.transactions, support = .1, cex.names = .6, col = rainbow(10), topN=10)
rules <- apriori(speciality.transactions, parameter = list(support = 0.01, confidence = 0.4))
inspect(head(sort(rules, by = "confidence"), 10))
rules <- apriori(speciality.transactions, parameter = list(support = 0.01, confidence = 0.1))
inspect(head(sort(rules, by = "confidence"), 10))
rules <- apriori(speciality.transactions, parameter = list(support = 0.01, confidence = 0.4))
inspect(head(sort(rules, by = "confidence"), 10))
inspect(head(sort(rules, by = "support"), 10))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.01, confidence = 0.4, minlen=3))
inspect(head(sort(rules2, by = "confidence"), 10))
inspect(head(sort(rules2, by = "support"), 10))
inspect(head(sort(rules2, by = "lift"), 10))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.01, confidence = 0.4, minlen=2))
inspect(head(sort(rules2, by = "confidence"), 10))
inspect(head(sort(rules2, by = "support"), 10))
inspect(head(sort(rules2, by = "lift"), 10))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.01, confidence = 0.4, minlen=3))
inspect(head(sort(rules2, by = "confidence"), 10))
inspect(head(sort(rules2, by = "support"), 10))
inspect(head(sort(rules2, by = "lift"), 10))
rules <- apriori(speciality.transactions, parameter = list(support = 0.02, confidence = 0.4))
inspect(head(sort(rules, by = "confidence"), 10))
rules <- apriori(speciality.transactions, parameter = list(support = 0.1, confidence = 0.4))
inspect(head(sort(rules, by = "confidence"), 10)
rules <- apriori(speciality.transactions, parameter = list(support = 0.02, confidence = 0.4))
inspect(head(sort(rules, by = "confidence"), 10))
rules <- apriori(speciality.transactions, parameter = list(support = 0.1, confidence = 0.4))
inspect(head(sort(rules, by = "confidence"), 10))
rules <- apriori(speciality.transactions, parameter = list(support = 0.1, confidence = 0.4))
inspect(head(sort(rules, by = "support"), 10))
rules <- apriori(speciality.transactions, parameter = list(support = 0.1, confidence = 0.4))
inspect(head(sort(rules, by = "support"), 100))
rules <- apriori(speciality.transactions, parameter = list(support = 0.25, confidence = 0.4))
inspect(head(sort(rules, by = "support"), 100))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.25, confidence = 0.4, minlen=3))
inspect(head(sort(rules2, by = "confidence"), 10))
inspect(head(sort(rules2, by = "support"), 10))
inspect(head(sort(rules2, by = "lift"), 10))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.25, confidence = 0.4, minlen=3))
inspect(head(sort(rules2, by = "confidence"), 10))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.1, confidence = 0.4, minlen=3))
inspect(head(sort(rules2, by = "confidence"), 10))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.1, confidence = 0.4, minlen=3))
inspect(head(sort(rules2, by = "confidence"), 100))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.1, confidence = 0.4, minlen=3))
inspect(head(sort(rules2, by = "support"), 100))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.1, confidence = 0.4, minlen=3))
inspect(head(sort(rules2, by = "support"), 100))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.1, confidence = 0.4, minlen=2))
inspect(head(sort(rules2, by = "support"), 100))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.1, confidence = 0.1, minlen=2))
inspect(head(sort(rules2, by = "support"), 100))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.1, confidence = 0.1, minlen=2))
inspect(head(sort(rules2, by = "support"), 100))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.1, confidence = 0.1, minlen=4))
inspect(head(sort(rules2, by = "support"), 100))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.05, confidence = 0.1, minlen=4))
inspect(head(sort(rules2, by = "support"), 100))
# carreguem les dades i strings els factoritzem
specialities.data<-read.csv('specialities-all.csv',stringsAsFactors = FALSE, encoding='latin1')
# veiem el nombre de registres que tenim
str(dim(specialities.data)[1])
# veiem l'estructura de les dades
str(specialities.data)
summary(specialities.data)
colSums(is.na(specialities.data))
# discretitzem les dades
for (i in 1:3) {
specialities.data[,i] <- as.factor(specialities.data[,i])
}
summary(specialities.data)
# transformem el data en una llista de les specialities agrupats per els usuaris, es a dir, tenim les specialities que escull cada usuari
# contem el número d'usuaris diferents i ens surten 15000. Tindrem 12130 transaccions
users <- specialities.data[,"id_user"]
n_distinct(users)
speciality <- split(x=specialities.data[,"speciality"],f=specialities.data$id_user)
# trasformem el data com a transactions. Cada transacció es un usuari i les espcialitats que selecciona
speciality.transactions <- as(speciality,"transactions")
itemFrequencyPlot(speciality.transactions, support = .1, cex.names = .6, col = rainbow(10), topN=10)
rules <- apriori(speciality.transactions, parameter = list(support = 0.25, confidence = 0.4))
inspect(head(sort(rules, by = "support"), 100))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.05, confidence = 0.1, minlen=4))
inspect(head(sort(rules2, by = "support"), 100))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.1, confidence = 0.1, minlen=4))
inspect(head(sort(rules2, by = "support"), 100))
rules2 <- apriori(speciality.transactions, parameter = list(support = 0.05, confidence = 0.1, minlen=4))
inspect(head(sort(rules2, by = "support"), 100))
